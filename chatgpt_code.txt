import discord
from discord.ext import commands
from discord import app_commands
import os
import json
import random
import string
from dotenv import load_dotenv
from discord.ui import View, Button, Select, Modal, TextInput

def load_submissions():
    with open("submissions.json", "r") as f:
        return json.load(f)

def get_submission_by_id(submissions, user_id):
    for sub in submissions:
        if sub["user_id"] == user_id:
            return sub
    return {}

load_dotenv()
TOKEN = os.getenv("DISCORD_BOT_TOKEN")

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)
bot.temp_submissions = {}
verification_codes = {}

class CreatorInfoModal(Modal):
    def __init__(self, bot):
        super().__init__(title="Provide Additional Creator Info")
        self.bot = bot

        self.content_type = TextInput(
            label="Content Type (e.g. Gaming, Music, Reactions)",
            placeholder="Describe your content style...",
            required=True
        )
        self.monthly_views = TextInput(
            label="Views in the last 30 days",
            placeholder="e.g. 250,000",
            required=True
        )
        self.new_followers = TextInput(
            label="New Followers in the Last 30 Days",
            placeholder="e.g. 1200",
            required=True
        )
        self.price_info = TextInput(
            label="Price per Video or per 1000 Views",
            placeholder="e.g. ‚Ç¨5 per post or ‚Ç¨0,50 per 1.000 views",
            required=True
        )
        self.extra_offer = TextInput(
            label="Extra Offers (optional)",
            placeholder="e.g. Link in Bio, Product Reviews, etc.",
            required=False
        )

        self.add_item(self.content_type)
        self.add_item(self.monthly_views)
        self.add_item(self.new_followers)
        self.add_item(self.price_info)
        self.add_item(self.extra_offer)

    async def on_submit(self, interaction: discord.Interaction):
        user = interaction.user
        submission_info = self.bot.temp_submissions.get(user.id)

        if not submission_info:
            await interaction.response.send_message("‚ö†Ô∏è No submission data found. Please use `/verify` first.", ephemeral=True)
            return

        # Daten in temp speichern
        submission_info["details"] = {
            "views_last_30": self.monthly_views.value,
            "new_followers": self.new_followers.value,
            "price": self.price_info.value,
            "extra_offers": self.extra_offer.value,
            "content_type": self.content_type.value
        }

        # Nun final speichern
        try:
            with open("submissions.json", "r") as f:
                submissions = json.load(f)
        except:
            submissions = []

        # Vorherige Eintr√§ge f√ºr diesen User + Plattform entfernen
        submissions = [
            s for s in submissions
            if not (s["user_id"] == user.id and s["platform"] == submission_info["platform"])
        ]

        submission = {
            "user_id": user.id,
            "username": user.name,
            "platform": submission_info["platform"],
            "handle": submission_info["username"],
            "bio": submission_info["bio"],
            "status": "pending",
            "code": submission_info["code"],
            "details": submission_info["details"]
        }

        submissions.append(submission)
        with open("submissions.json", "w") as f:
            json.dump(submissions, f, indent=2)

        # Channel finden & best√§tigen
        verify_channel = next((c for c in interaction.guild.text_channels if c.topic == submission_info["code"][1:]), None)
        if verify_channel:
            await verify_channel.send(
                f"{user.mention}, your application and additional info were submitted successfully.\n"
                f"Our team will now review your submission."
            )

        await interaction.response.send_message(
            "‚úÖ Thank you! Your additional info has been submitted and will be reviewed shortly.",
            ephemeral=True
        )

class RiskAgreementView(View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @discord.ui.select(
        placeholder="‚ö†Ô∏è Read the warning and confirm to proceed.",
        min_values=1,
        max_values=1,
        options=[
            discord.SelectOption(
                label="‚úÖ I have read and accept the risks of false information.",
                value="agreed"
            )
        ]
    )
    async def confirm_warning(self, interaction: discord.Interaction, select: Select):
        if select.values[0] == "agreed":
            await interaction.response.send_modal(CreatorInfoModal(self.bot))

class AssignButton(discord.ui.Button):
    def __init__(self, campaign_id):
        super().__init__(label="Assign to creator", style=discord.ButtonStyle.primary)
        self.campaign_id = campaign_id

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message(f"üõ† Assigning campaign {self.campaign_id}...", ephemeral=True)
        # Hier sp√§ter richtige Logik einbauen


class CampaignActionView(View):
    def __init__(self, campaign_name):
        super().__init__(timeout=None)
        self.campaign_name = campaign_name

class CommentModal(Modal, title="Add Campaign Comment"):
    def __init__(self, campaign_name):
        super().__init__()
        self.campaign_name = campaign_name
        self.comment = TextInput(label="Your comment", placeholder="e.g. Video is scheduled for tomorrow!", required=True)
        self.add_item(self.comment)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            f"üìù Comment added to **{self.campaign_name}**:\n> {self.comment.value}",
            ephemeral=False
        )

class SubmitModal(Modal, title="Submit Campaign Result"):
    def __init__(self, campaign_name):
        super().__init__()
        self.campaign_name = campaign_name
        self.submission = TextInput(label="Link to your post / video", placeholder="Paste the link here", required=True)
        self.add_item(self.submission)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            f"üìé Submission for **{self.campaign_name}** received:\n> {self.submission.value}",
            ephemeral=False
        )

    @discord.ui.button(label="‚úèÔ∏è Add Comment", style=discord.ButtonStyle.blurple)
    async def comment(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(CommentModal(self.campaign_name))

    @discord.ui.button(label="üìé Submit", style=discord.ButtonStyle.green)
    async def submit(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(SubmitModal(self.campaign_name))

@bot.event
async def on_ready():
    await bot.wait_until_ready()
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} slash command(s).")
    except Exception as e:
        print(f"Error syncing commands: {e}")
    print(f"Jake is online as {bot.user}")

@bot.tree.command(name="apply", description="Apply for Elysium access")
async def apply_command(interaction: discord.Interaction):
    guild = interaction.guild
    user = interaction.user

    code = "elysium-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    verification_codes[user.id] = f"#{code}"
    channel_name = f"verify-{code.lower()}"

    existing = discord.utils.get(guild.text_channels, name=channel_name)
    if existing:
        await interaction.response.send_message("You already have a verify channel.", ephemeral=True)
        return

    bot_role = discord.utils.get(guild.roles, name="Jake Bot")
    admin_role = discord.utils.get(guild.roles, name="Admin")

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(
            view_channel=False,
            use_application_commands=True
        ),
        user: discord.PermissionOverwrite(
            view_channel=True,
            send_messages=True,
            use_application_commands=True
        ),
    }
    if bot_role:
        overwrites[bot_role] = discord.PermissionOverwrite(view_channel=True)
    if admin_role:
        overwrites[admin_role] = discord.PermissionOverwrite(view_channel=True)

    channel = await guild.create_text_channel(name=channel_name, overwrites=overwrites, topic=code)
    await channel.send(
        f"Hi {user.mention}, welcome to Elysium!\n"
        f"Please place this code visibly in your profile:\n**#{code}**\n"
        f"Then run `/verify platform:<platform> username:<your_username>` here."
    )

    await interaction.response.send_message("‚úÖ Your private verification channel has been created.", ephemeral=True)

@bot.tree.command(name="verify", description="Verify your social profile by code")
@app_commands.describe(
    platform="Platform (TikTok, Instagram, YouTube, Spotify)",
    username="Your username or playlist ID"
)
async def verify_command(interaction: discord.Interaction, platform: str, username: str):
    submissions = load_submissions()
    user = interaction.user
    code = verification_codes.get(user.id)

    user_id = str(interaction.user.id)
    user_sub = get_submission_by_id(submissions, user_id)

    # Speichere temp Submission
    bot.temp_submissions[user.id] = {
        "platform": platform,
        "username": username,
        "bio": "N/A",  # Optional, kannst du sp√§ter ersetzen
        "code": code,
    }

    if not user_sub.get("details"):
        await interaction.response.send_message(
            content=(
                "**‚ö†Ô∏è Final Warning ‚Äì Read Carefully!**\n\n"
                "By continuing, you confirm that the information you‚Äôre about to provide is **truthful**.\n"
                "**Any attempt to manipulate views, follower stats, or pricing will result in a permanent ban** and full denial of payment.\n\n"
                "If you're unsure, please **cancel** now and contact support first."
            ),
            view=RiskAgreementView(bot),
            ephemeral=True
        )
        return  # WICHTIG: sonst l√§uft es unten weiter

    # Wenn bereits Details vorhanden, direkt Channel-Nachricht senden
    verify_channel = next((c for c in interaction.guild.text_channels if c.topic == code[1:]), None)
    if verify_channel:
        await verify_channel.send(
            f"{user.mention}, your code was successfully found.\n\n"
            "Please answer a few more questions to complete your application.\n\n"
            "### ‚ö†Ô∏è Warning ‚Äì be honest:\n"
            "All information you submit must be truthful and based on your actual content performance.\n"
            "If we detect false data, misleading claims, or inflated numbers:\n\n"
            "* You will be permanently banned from the Elysium network\n"
            "* You will be removed from all Discord systems and future campaigns\n"
            "* We reserve the right to withhold any earned revenue or pending payouts\n\n"
            "This includes fake follower counts, made-up prices, and manipulated stats."
        )

class SubmissionReviewView(View):
    def __init__(self, bot, submission):
        super().__init__(timeout=None)
        self.bot = bot
        self.submission = submission

    @discord.ui.button(label="‚úÖ Accept", style=discord.ButtonStyle.green)
    async def accept(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer()
        guild = interaction.guild
        user = guild.get_member(self.submission["user_id"])

        if not user:
            await interaction.followup.send("User not found.")
            return

        trusted_role = discord.utils.get(guild.roles, name="Trusted")
        if trusted_role:
            try:
                await user.add_roles(trusted_role)
            except Exception as e:
                await interaction.followup.send(f"‚ö†Ô∏è Could not assign role: {e}", ephemeral=False)

        channel_name = f"t-creator-{user.name.lower()}-{self.submission['platform']}"
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            user: discord.PermissionOverwrite(view_channel=True),
        }
        bot_role = discord.utils.get(guild.roles, name="Jake Bot")
        admin_role = discord.utils.get(guild.roles, name="Admin")
        if bot_role:
            overwrites[bot_role] = discord.PermissionOverwrite(view_channel=True)
        if admin_role:
            overwrites[admin_role] = discord.PermissionOverwrite(view_channel=True)

        creator_channel = None
        expected_prefix = f"t-creator-{user.name.lower()}-{self.submission['platform']}"
        for channel in interaction.guild.text_channels:
            if channel.name.startswith(expected_prefix):
                creator_channel = channel
                break

        embed = discord.Embed(
            title="Welcome to Elysium!",
            description=(
                f"{user.mention}, your submission has been accepted.\n\n"
                "You're now part of our Creator Network and eligible for campaigns.\n"
                "Stay tuned for updates and opportunities right here."
            ),
            color=discord.Color.green()
        )
        if not creator_channel:
            await interaction.followup.send("‚ùå Creator channel not found.", ephemeral=True)
            return

        await creator_channel.send(
            f"üéâ Congratulations {user.mention}!\n\n"
            f"You've been officially accepted into the Elysium Creator Program.\n"
            f"You're now eligible to receive paid campaigns right here in this channel.\n\n"
            f"Stay active, follow the instructions carefully ‚Äì and let‚Äôs grow together!"
        )


with open("submissions.json", "r") as f:
    subs = json.load(f)
for s in subs:
    if s["user_id"] == self.submission["user_id"] and s["platform"] == self.submission["platform"]:
        s["status"] = "approved"
with open("submissions.json", "w") as f:
    json.dump(subs, f, indent=2)

await interaction.followup.send(f"{user.mention} has been accepted.")

@discord.ui.button(label="‚ùå Decline", style=discord.ButtonStyle.red)
async def decline(self, interaction: discord.Interaction, button: Button):
    await interaction.response.defer()
    guild = interaction.guild
    user = guild.get_member(self.submission["user_id"])

    verify_channel = next(
        (c for c in guild.text_channels if c.topic == self.submission["code"][1:]),
        None
    )

    if user:
        try:
            await user.send("Your submission was declined. You are welcome to reapply anytime.")
        except:
            pass

    if verify_channel:
        await verify_channel.send(
            f"{user.mention}, thanks again for your submission.\n\n"
            "After reviewing your profile, we've decided not to proceed at this time.\n"
            "You‚Äôre welcome to apply again in the future with updates or new platforms."
        )

    with open("submissions.json", "r") as f:
        subs = json.load(f)

    subs = [
        s for s in subs
        if not (
            s["user_id"] == self.submission["user_id"] and
            s["platform"] == self.submission["platform"]
        )
    ]

    with open("submissions.json", "w") as f:
        json.dump(subs, f, indent=2)

    class DeleteView(View):
        @discord.ui.button(label="üóëÔ∏è Delete now", style=discord.ButtonStyle.grey)
        async def delete_channel(self, interaction2: discord.Interaction, button: Button):
            if verify_channel:
                await verify_channel.delete()
            await interaction2.response.send_message("Channel deleted.", ephemeral=False)

    await interaction.followup.send(
        f"{user.mention} has been declined. You can delete the verify channel now or let it expire later.",
        view=DeleteView()
    )


    @discord.ui.button(label="üîÅ More Info", style=discord.ButtonStyle.blurple)
    async def more_info(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer()
        guild = interaction.guild
        user = guild.get_member(self.submission["user_id"])
        verify_channel = next((c for c in guild.text_channels if c.topic == self.submission["code"][1:]), None)

        if user:
            try:
                await user.send("We‚Äôd love to know more before we decide. Could you share more details or stats?")
            except:
                pass

        if verify_channel:
            await interaction.followup.send(f"Jump to verify channel: {verify_channel.mention}")
        else:
            await interaction.followup.send("Couldn't find the verify channel.")

@bot.tree.command(name="review-submissions", description="Review all pending applications")
async def review_submissions(interaction: discord.Interaction):
    if not discord.utils.get(interaction.user.roles, name="Admin"):
        await interaction.response.send_message("Only Admins can use this command.", ephemeral=True)
        return

    await interaction.response.defer(ephemeral=False)

    try:
        with open("submissions.json", "r") as f:
            subs = json.load(f)
    except:
        subs = []

    pending = [s for s in subs if s["status"] == "pending"]

    if not pending:
        await interaction.followup.send("‚úÖ No pending applications.")
        return

    for sub in pending:
        embed = discord.Embed(title=f"{sub['username']} ‚Äì {sub['platform'].capitalize()} Submission")
        details = sub.get("details")
        if details:
            embed.add_field(
                name="üìä Stats & Prices",
                value=(
                    f"**Views (30d):** {details.get('views_last_30', 'N/A')}\n"
                    f"**New Followers (30d):** {details.get('new_followers', 'N/A')}\n"
                    f"**Price:** {details.get('price', 'N/A')}\n"
                    f"**Extras:** {details.get('extra_offers', '‚Äì')}"
                ),
                inline=False
            )


        handle = sub["handle"]
        platform = sub["platform"].lower()
        link = {
            "tiktok": f"https://www.tiktok.com/@{handle}",
            "instagram": f"https://www.instagram.com/{handle}",
            "youtube": f"https://www.youtube.com/@{handle}",
            "spotify": f"https://open.spotify.com/playlist/{handle}"
        }.get(platform, "Unknown")

        embed.add_field(name="Platform Link", value=link, inline=False)
        await interaction.followup.send(embed=embed, view=SubmissionReviewView(bot, sub))


@bot.tree.command(name="create-campaign", description="Create a new campaign")
@app_commands.describe(
    title="Short campaign title",
    description="What is this campaign about?",
    reward="Payout or reward (e.g. 20‚Ç¨ / video)",
    deadline="Deadline or time frame (optional)"
)
async def create_campaign(
    interaction: discord.Interaction,
    title: str,
    description: str,
    reward: str,
    deadline: str = "‚Äì"
):
    if not discord.utils.get(interaction.user.roles, name="Admin"):
        await interaction.response.send_message("Only Admins can create campaigns.", ephemeral=True)
        return

    try:
        with open("campaigns.json", "r") as f:
            campaigns = json.load(f)
    except:
        campaigns = []

    campaign = {
        "id": len(campaigns) + 1,
        "title": title,
        "description": description,
        "reward": reward,
        "deadline": deadline,
        "status": "active"
    }

    campaigns.append(campaign)
    with open("campaigns.json", "w") as f:
        json.dump(campaigns, f, indent=2)

    await interaction.response.send_message(f"‚úÖ Campaign '{title}' was created successfully.", ephemeral=True)


@bot.tree.command(name="review-campaigns", description="Review and assign campaigns to creators")
async def review_campaigns(interaction: discord.Interaction):
    if not discord.utils.get(interaction.user.roles, name="Admin"):
        await interaction.response.send_message("Only Admins can review campaigns.", ephemeral=True)
        return

    await interaction.response.defer(ephemeral=False)

    try:
        with open("campaigns.json", "r") as f:
            campaigns = json.load(f)
    except:
        campaigns = []

    if not campaigns:
        await interaction.followup.send("üì≠ No campaigns found.")
        return
        
    for campaign in campaigns:
        campaign_id = campaign["id"]
        embed = discord.Embed(title=f"üì¢ {campaign['title']}", description=campaign["description"], color=discord.Color.teal())
        embed.add_field(name="üí∞ Reward", value=campaign["reward"], inline=True)
        embed.add_field(name="üìÖ Deadline", value=campaign["deadline"], inline=True)
        embed.add_field(name="üîñ Status", value=campaign["status"], inline=True)
        embed.add_field(name="üÜî Campaign ID", value=campaign_id, inline=False)

        view = View()
        view.add_item(AssignButton(str(campaign_id)))  # cast zu str falls n√∂tig


        await interaction.followup.send(embed=embed, view=view)

@bot.tree.command(name="assign-campaign", description="Assign a campaign to a creator")
@app_commands.describe(
    campaign_id="The ID of the campaign",
    creator_id="The Discord User ID of the creator"
)
async def assign_campaign(interaction: discord.Interaction, campaign_id: str, creator_id: str):

    if not discord.utils.get(interaction.user.roles, name="Admin"):
        await interaction.response.send_message("Only Admins can assign campaigns.", ephemeral=True)
        return

    try:
        with open("campaigns.json", "r") as f:
            campaigns = json.load(f)
    except:
        await interaction.response.send_message("Error loading campaigns.json", ephemeral=True)
        return

    campaign = next((c for c in campaigns if str(c["id"]) == campaign_id), None)
    if not campaign:
        await interaction.response.send_message("‚ùå Campaign not found.", ephemeral=True)
        return

    guild = interaction.guild
    user = interaction.guild.get_member(int(creator_id))

    if not user:
        await interaction.response.send_message("‚ùå Creator not found in server.", ephemeral=True)
        return

    # Finde den Creator-Channel
    channel_name_part = f"t-creator-{user.name.lower()}"
    target_channel = next((c for c in guild.text_channels if c.name.startswith(channel_name_part)), None)

    if not target_channel:
        await interaction.response.send_message("‚ùå Couldn‚Äôt find the creator‚Äôs channel.", ephemeral=True)
        return

    embed = discord.Embed(
        title=f"üì¢ New Campaign: {campaign['title']}",
        description=campaign["description"],
        color=discord.Color.gold()
    )
    embed.add_field(name="üí∞ Reward", value=campaign["reward"], inline=True)
    embed.add_field(name="üìÖ Deadline", value=campaign["deadline"], inline=True)
    embed.set_footer(text=f"Campaign ID: {campaign['id']}")

    await target_channel.send(
        f"{user.mention}, here's a new campaign opportunity for you üëá",
        embed=embed,
        view=CampaignActionView(campaign["title"])
    )

    # Finde den Creator-Channel

@bot.tree.command(name="my-campaigns", description="Show your active campaigns")
async def my_campaigns(interaction: discord.Interaction):
    user = interaction.user
    guild = interaction.guild

    try:
        with open("campaigns.json", "r") as f:
            campaigns = json.load(f)
    except:
        await interaction.response.send_message("Could not load campaign list.", ephemeral=True)
        return

    # Filter: Welche Campaigns wurden diesem User bereits gesendet?
    # (Wir verwenden den Creator-Channel als Nachweis)

    relevant_channels = [
    c for c in guild.text_channels
    if c.topic and str(user.id) in c.topic
    ]

    if not relevant_channels:
        await interaction.response.send_message("You don‚Äôt have a creator channel yet.", ephemeral=True)
        return

    found = []
    async for message in relevant_channels[0].history(limit=100):
        if message.embeds:
            embed = message.embeds[0]
            if embed.title and embed.title.startswith("üì¢ New Campaign"):
                found.append(embed)

    if not found:
        await interaction.response.send_message("You don‚Äôt have any campaigns yet.", ephemeral=True)
        return

    for embed in found:
        await interaction.user.send(embed=embed)

    await interaction.response.send_message("üì© Sent your active campaigns to your DMs.", ephemeral=True)



bot.run(TOKEN)

